% Read in data and cut signals into slices

file_sampling_rate = 8000;

files = {
    %'data/stefan/whole/2xClockwise_two_Sharpley1.raw',   ...
    %'data/stefan/whole/2xClockwise_two_Sharpley2.raw',   ...
    %'data/stefan/whole/2xCounter_two_Sharpley1.raw',     ...
    %'data/stefan/whole/2xCounter_two_Sharpley2.raw',     ...
    'data/stefan/whole/InwardFlex_two_Sharpley1.raw',    ...
    'data/stefan/whole/InwardFlex_two_Sharpley2.raw',    ...
    'data/stefan/whole/OutwardFlex_two_Sharpley1.raw',   ...
    'data/stefan/whole/OutwardFlex_two_Sharpley2.raw',   ...
    'data/stefan/whole/RevGrasp_two_Sharpley1.raw',      ...
    'data/stefan/whole/RevGrasp_two_Sharpley2.raw',      ...
    'data/stefan/whole/SimpleSqueeze_two_Sharpley1.raw', ...
    'data/stefan/whole/SimpleSqueeze_two_Sharpley2.raw'  ...
};

gesture_names = {
    %'Clockwise Rot.',         ...
    %'Counter-Clockwise Rot.', ...
    'Inward Flex',            ...
    'Outward Flex',           ...
    'Reverse Grasp',          ...
    'Simple Squeeze'          ...
};

signals = cell(1, size(files, 2)/2);

n = 1;
for i = 1:2:size(files, 2)
    signals(n) = {get_two_channel_signals(      ...
        char(files(i)), char(files(i+1)), 8000, 500 ...
    )};
    n = n+1;
end


classifier = EMGClassifier(200);
gestures = [];

for i = 1:size(signals, 2)
    signals_copy = signals{i};
    signals_copy(:,1) = [];
    gesture = classifier.register_gesture(char(gesture_names(i)));
    for k = 1:length(signals_copy)
        classifier.train_multiple_channels(signals_copy{k}, gesture);
    end
    gestures = [gestures, gesture]; %#ok<AGROW>
end

